[project]
name = "monopoly-simulator-api"
version = "1.0.0"
description = "A simplified Monopoly-style board game simulation API with clean architecture"
requires-python = ">=3.13"
dependencies = [
    "fastapi>=0.118.0",
    "pydantic>=2.11.9",
    "pydantic-settings>=2.0.0",
    "uvicorn>=0.37.0",
    "python-json-logger>=3.2.1",
    "slowapi>=0.1.9",
]

[project.scripts]
start = "app.main:start"

[dependency-groups]
dev = [
    "httpx>=0.28.1",
    "pytest>=8.4.2",
    "pytest-cov>=6.0.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "pylint>=3.0.0",
    "mypy>=1.8.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --strict-markers"
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (API, E2E flows)",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "app/**/__init__.py",
    "app/main.py",
    "app/core/config.py",
    "app/infrastructure/api/routes.py",
    "app/infrastructure/api/middleware.py",
    "app/infrastructure/di/container.py",
    "app/infrastructure/logging/logger.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
    "return NotImplemented",
]
precision = 2
show_missing = true
skip_covered = false
fail_under = 95

[tool.coverage.html]
directory = "htmlcov"
