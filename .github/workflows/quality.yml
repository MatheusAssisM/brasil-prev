name: Code Quality & Tests

on:
  push:
    branches: [develop, main, master]
  pull_request:
    branches: [develop, main, master]

jobs:
  format:
    name: Code Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e .

      - name: Check code formatting with Black
        run: |
          uv run black --check app/ tests/

  lint:
    name: Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e .

      - name: Run Flake8
        run: |
          uv run flake8 app/ tests/

      - name: Run Pylint
        run: |
          uv run pylint app/ --recursive=y

  typecheck:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e .

      - name: Run MyPy type checking
        run: |
          uv run mypy app/

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e .

      - name: Run unit tests with coverage
        run: |
          uv run pytest -m unit --cov=app --cov-report=term-missing --cov-report=xml --cov-report=html

      - name: Check coverage threshold
        run: |
          uv run pytest -m unit --cov=app --cov-fail-under=80

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e .

      - name: Run integration tests
        run: |
          uv run pytest -m integration -v

  summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [format, lint, typecheck, unit-tests, integration-tests]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "üìä Quality Check Results:"
          echo "=========================="
          echo "Format:       ${{ needs.format.result }}"
          echo "Lint:         ${{ needs.lint.result }}"
          echo "Type Check:   ${{ needs.typecheck.result }}"
          echo "Unit Tests:   ${{ needs.unit-tests.result }}"
          echo "Integration:  ${{ needs.integration-tests.result }}"
          echo ""

          if [ "${{ needs.format.result }}" == "success" ] && \
             [ "${{ needs.lint.result }}" == "success" ] && \
             [ "${{ needs.typecheck.result }}" == "success" ] && \
             [ "${{ needs.unit-tests.result }}" == "success" ] && \
             [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "‚úÖ All quality checks passed!"
            exit 0
          else
            echo "‚ùå Some quality checks failed!"
            exit 1
          fi
